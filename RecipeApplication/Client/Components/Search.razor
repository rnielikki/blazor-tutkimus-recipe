@namespace RecipeApplication
@using KeywordSearchBox
@using System.Collections.Generic;
@inject KeywordSearchBox.ISearchModel<RecipeApplication.Models.RecipeDto> model;
@inject HttpClient Http

@if (IngredientNames == null)
{
    <p style="text-align:center;">Loading...</p>
}
else
{
    <SearchBox WordList=@(IngredientNames)
               OnSearch="@FindRecipe" @bind-ResultData="model"></SearchBox>
    <div class="result-list">
        <ResultBox @bind-ResultData="model">
            <Default>
                <div class="result-empty">
                    <p>What ingredients do you have? Leave yours, we suggest!</p>
                </div>
            </Default>
            <NotFound>
                <div class="result-empty">
                    <p>Oops! You cannot make food with them. Suggestions:</p>
                    <ul>
                        <li>Find with less keywords, but not zero.</li>
                        <li>Let's go to the market to buy fresh foods!</li>
                        <li>Or just go outside to eat!</li>
                        <li>Or just order your pizza (:</li>
                    </ul>
                </div>
            </NotFound>
            <ResultTemplate>
                <div class="result-list-item">
                    <h2><a href="Recipe/@context.ID">@context.FoodName</a></h2>
                    <h3>Ingredients Contains</h3>
                    <div class="result-list-section">
                        @foreach (var SearchModelingredient in context.Ingredients)
                            {
                                if (model.Keywords.Contains(SearchModelingredient.Name))
                                {
                                <div class="result-list-ingredient">
                                    <span style="font-weight:600">@SearchModelingredient.Name;</span>
                                    <span>@SearchModelingredient.Amount @SearchModelingredient.Unit</span>
                                </div>
                                }
                            }
                    </div>
                    <div class="result-list-section result-list-summary">@CutSummary(context.Content)</div>
                </div>
            </ResultTemplate>
        </ResultBox>
    </div>
}

@code {
    private const int MaxSummaryLength = 200;
    [Parameter]
    public RenderFragment ResultTemplate { get; set; }
    private IReadOnlyCollection<string> IngredientNames;
    protected override async Task OnInitializedAsync()
    {
        IngredientNames = (await Http.GetJsonAsync<IEnumerable<string>>("api/Ingredients")).ToList().AsReadOnly();
    }
    private async Task FindRecipe(IList<string> data)
    {
        model.Keywords = data;
        model.Results = await Http.PostJsonAsync<IEnumerable<RecipeApplication.Models.RecipeDto>>("api/Recipes/Search", data);
    }
    private string CutSummary(string summary) => (summary.Length < MaxSummaryLength) ? summary : summary.Substring(0, MaxSummaryLength) + "...";
}
